install.packages("tidyr")
install.packages("plyr")
install.packages("GGally")
install.packages("plotly")
library(plotly)
library(tidyr)
library(plyr)
library(GGally)
setwd("C:/Users/mlacey/OneDrive - Defenders of Wildlife/SDM_Species_Data_Files")
plot_data <- read.csv("defenders_sp_occ_mcp_areas.csv")
View(plot_data)
p_orig <- plot_ly(plot_data, x = ~original, y = ~mcp_area, color = ~name, colors="Set1")
p_orig
p_orig <- layout(p_orig, annotations = a, xaxis = list(type = "log"),
yaxis = list(type = "log"))
p_orig <- layout(p_orig,xaxis = list(type = "log"),
yaxis = list(type = "log"))
p_orig
p_orig <- layout(p_orig,xaxis = list(title = "Number of Occurrences", type = "log"),
yaxis = list(title = "Range (km)", type = "log"))
p_orig
p_orig <- layout(p_orig,xaxis = list(title = "Number of Occurrences", type = "log"),
yaxis = list(title = "Range (km)", type = "log"),
ylim = c(0, 100000000000))
p_orig
plot_data <- read.csv("originalplot_dataforblog.csv")
p_orig <- plot_ly(plot_data, x = ~original, y = ~mcp_area, color = ~name, colors="Set1")
p_orig <- layout(p_orig,xaxis = list(title = "Number of Occurrences", type = "log"),
yaxis = list(title = "Range (km)", type = "log"))
p_orig
p_orig <- layout(p_orig,xaxis = list(title = "Number of Occurrences", type = "log"),
yaxis = list(title = "Range (km)", type = "log"),
showlegend = FALSE)
p_orig
library(adehabitatHR)
library(mapr)
library(plyr)
library(dplyr)
library(rgdal)
library(scrubr)
library(sp)
library(spocc)
B_aff <- occ(query = c('Bombus affinis'), from = c('bison', 'gbif', 'inat'))
#fixnames by query:
fng <- fixnames(B_aff, how="query")$gbif
fng_copy <- occ2df(fng)
fnb <- fixnames(B_aff, how="query")$bison
fnb_copy <- occ2df(fnb)
fni <- fixnames(B_aff, how="query")$inat
fni_copy <- occ2df(fni)
View(fnb_copy)
View(fng_copy)
View(fni_copy)
#Selecting Columns with fixed names:
final_bison <- fnb_copy[, c(13, 38, 40, 28, 3)]
View(final_bison)
View(fnb_copy)
#Selecting Columns with fixed names:
final_bison <- fnb_copy[, c(16, 27, 11, 3,45)]
View(final_bison)
View(fnb_copy)
View(fng_copy)
final_gbif <- fng_copy[, c(1, 3, 2, 39, 37)]
View(final_gbif)
View(fni_copy)
final_inat <- fni_copy[, c(57, 4, 5, 2, 23)]
View(final_inat)
#breaking apart observation dates to just get years:
inat_years <- strsplit(as.character(final_inat$observed_on), '-')
inat_years_df <- as.data.frame(inat_years, row.names = NULL, optional = FALSE,
cut.names = FALSE, col.names = names(inat_years), fix.empty.names = TRUE,
stringsAsFactors = default.stringsAsFactors())
tp <- data.frame(t(inat_years_df))
colnames(tp)[colnames(tp)=="X1"] <- "year"
colnames(tp)[colnames(tp)=="X2"] <- "month"
colnames(tp)[colnames(tp)=="X3"] <- "day"
#putting date columns back with final_inat:
final_inat$ID <- seq.int(nrow(final_inat))
tp$ID <- seq.int(nrow(tp))
final_inat <- merge(final_inat, tp, by = "ID")
View(final_inat)
final_inat <- as.data.frame(final_inat, row.names = NULL, optional = FALSE,
cut.names = FALSE, col.names = names(final_inat), fix.empty.names = TRUE,
stringsAsFactors = default.stringsAsFactors())
final_inat <- final_inat[, c(2, 3, 4, 5, 7)]
View(final_inat)
final_inat <- fni_copy[, c(57, 4, 5, 2, 23)]
#breaking apart observation dates to just get years:
inat_years <- strsplit(as.character(final_inat$observed_on), '-')
inat_years_df <- as.data.frame(inat_years, row.names = NULL, optional = FALSE,
cut.names = FALSE, col.names = names(inat_years), fix.empty.names = TRUE,
stringsAsFactors = default.stringsAsFactors())
View(inat_years_df)
tp <- data.frame(t(inat_years_df))
View(tp)
colnames(tp)[colnames(tp)=="X1"] <- "year"
colnames(tp)[colnames(tp)=="X2"] <- "month"
colnames(tp)[colnames(tp)=="X3"] <- "day"
#putting date columns back with final_inat:
final_inat$ID <- seq.int(nrow(final_inat))
tp$ID <- seq.int(nrow(tp))
final_inat <- merge(final_inat, tp, by = "ID")
View(final_inat)
final_inat <- as.data.frame(final_inat, row.names = NULL, optional = FALSE,
cut.names = FALSE, col.names = names(final_inat), fix.empty.names = TRUE,
stringsAsFactors = default.stringsAsFactors())
final_inat <- final_inat[, c(2, 3, 4, 7, 6)]
View(final_inat)
#Renaming iNAT columns:
colnames(final_inat)[colnames(final_inat)=="name"] <- "name"
colnames(final_inat)[colnames(final_inat)=="longitude"] <- "longitude"
colnames(final_inat)[colnames(final_inat)=="latitude"] <- "latitude"
colnames(final_inat)[colnames(final_inat)=="positional_accuracy"] <- "coordinateUncertaintyInMeters"
colnames(final_inat)[colnames(final_inat)=="year"] <- "year"
View(final_inat)
View(final_gbif)
View(final_bison)
#joining GBIF, BISON, and iNAT data frames:
gbif_bis_inat <- rbind(final_gbif,final_bison, final_inat)
#remove any lines with missing or unlikely coordinates (using scrubr)
B_affinis <- dframe(gbif_bis_inat) %>% coord_incomplete() %>% coord_unlikely()
#convert NAs to blanks:
B_affinis[is.na(B_affinis)] <- ""
#convert to numeric data:
B_char <- B_affinis
B_affinis[, 2:5] <- sapply(B_affinis[, 2:5], as.numeric)
#dat_1980 <- filter(B_affinis, year >= 1980)
dat_1980_2000 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
View(dat_1980_2000)
#dat_1980 <- filter(B_affinis, year >= 1980)
dat_1980_500 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
dat_1980_2000 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 2000)
View(dat_1980_2000)
#dat_1980 <- filter(B_affinis, year >= 1980)
data_1980_500 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
data_1980_2000 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 2000)
View(dat_1980_500)
spatialtotal<-SpatialPointsDataFrame(data_1980_500[,2:3],
as.data.frame(data_1980_500[,c(1,4,5)]),
proj4string = CRS("+proj=longlat +datum=WGS84"))
newcrs<-CRS("+proj=robin +datum=WGS84")
spatialtotal2<-spTransform(spatialtotal,newcrs)
x <- split(spatialtotal2, list(spatialtotal2$name))
dup <- remove.duplicates(x[[1]],zero=500.0,remove.second=TRUE)
for (i in (2:length(x))) {
dups <- remove.duplicates(x[[i]],zero=500.0,remove.second=TRUE)
dup <- rbind(dups,dup)
}
dup
spatialtotal<-SpatialPointsDataFrame(data_1980_500[,2:3],
as.data.frame(data_1980_500[,c(1,4,5)]),
proj4string = CRS("+proj=longlat +datum=WGS84"))
newcrs<-CRS("+proj=robin +datum=WGS84")
spatialtotal2<-spTransform(spatialtotal,newcrs)
View(spatialtotal)
View(data_1980_500)
spatialtotal<-SpatialPointsDataFrame(data_1980_500[,2:3],
as.data.frame(data_1980_500[,c(1,4,5)]),
proj4string = CRS("+proj=longlat +datum=WGS84"))
newcrs<-CRS("+proj=robin +datum=WGS84")
spatialtotal<-SpatialPointsDataFrame(data_1980_500[,2:3],
as.data.frame(data_1980_500[,c(1,4,5)]),
proj4string = CRS("+proj=longlat +datum=WGS84"))
dup <- remove.duplicates(spatialtotal[[1]],zero=500.0,remove.second=TRUE)
View(data_1980_500)
B_affinis[, 2:5] <- sapply(B_affinis[, 2:5], as.numeric)
data_1980_500 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
spatialtotal<-SpatialPointsDataFrame(data_1980_500[,2:3],
as.data.frame(data_1980_500[,c(1,4,5)]),
proj4string = CRS("+proj=longlat +datum=WGS84"))
newcrs<-CRS("+proj=robin +datum=WGS84")
spatialtotal2<-spTransform(spatialtotal,newcrs)
library(leaflet)
map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = NULL,
size = 7)
map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = "red",
size = 7)
write.csv("B_aff_test_data.csv")
write.csv(B_affinis, "B_aff_test_data.csv")
setwd("~/")
write.csv(B_affinis, "B_aff_test_data.csv")
read.csv("B_aff_test_data.csv")
B_affinis <- read.csv("B_aff_test_data.csv")
data_1980_500 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = "red",
size = 7)
map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = "red",
size = 7, addProviderTiles(providers$Esri.OceanBasemap))
B_aff_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = data_1980_500) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
B_aff_map <- leaflet() %>%
addTiles() %>%
addPolygons(data = data_1980_500) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
B_aff_map
testr <- map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = "red",
size = 7, addProviderTiles(providers$Esri.OceanBasemap))
B_aff_map <- leaflet(testr) %>%
addTiles() %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
B_aff_map <- leaflet(testr) %>%
addTiles() %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
B_aff_map
B_aff_map <- leaflet(data_1980_500) %>%
addTiles() %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
B_aff_map
B_aff_map <- leaflet(data_1980_500) %>%
addTiles() %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40,
color="blue", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 4, radius=60,
color="blue", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 4, radius=100,
color="blue", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 8, radius=100,
color="blue", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 5, radius=100,
color="blue", stroke = TRUE, fillOpacity = 0.8) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 5, radius=100,
color="blue", stroke = TRUE, fillOpacity = 0.2) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 5, radius=100,
color="blue", stroke = TRUE, fillOpacity = 0) %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 5, radius=100,
color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, weight = 5, radius=10, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
map_leaflet(data_1980_500, lon = "longitude", lat = "latitude", color = "red",
size = 7, addProviderTiles(providers$Esri.OceanBasemap))
B_affinis <- read.csv("B_aff_test_data.csv")
data_1980_500 <- filter(B_affinis, year >= 1980 & coordinateUncertaintyInMeters <= 500)
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-125, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-120, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-115, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-110, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-90, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-95, 24 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-95, 30 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
B_aff_map <- leaflet(B_affinis) %>%
fitBounds(-95, 40 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
B_aff_map
leaflet(B_affinis) %>%
fitBounds(-95, 40 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
leaflet(data_1980_500) %>%
fitBounds(-95, 40 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
data_1980 <- filter(B_affinis, year >= 1980)
leaflet(data_1980) %>%
fitBounds(-95, 40 ,-75, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
leaflet(data_1980) %>%
fitBounds(-95, 40 ,-74, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
leaflet(data_1980) %>%
fitBounds(-95, 40 ,-70, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
leaflet(data_1980) %>%
fitBounds(-95, 40 ,-71, 45) %>%
addCircles(~longitude, ~latitude, color="blue") %>%
addProviderTiles(providers$Esri.OceanBasemap)
shiny::runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
shiny::runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
species_text <- read.csv("data/Species_text.csv")
species_text <- read.csv("data/SpeciesText.csv")
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/app_copy_test2.R')
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/ESA_species_USA_2')
library(stringr)
str_sub(mergestates$Map, 1, str_length(mergestates$Species)-3)
runApp('C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/ESA_species_USA_2')
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
species_per_state <- ddply(species_data, ~state, summarise, count = length(unique(scientific_name)))
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
species_data <- read.csv("ESAIntrastateSpecies.csv")
setwd("C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/ESA_species_USA_2")
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
species_per_state <- ddply(species_data, ~state, summarise, count = length(unique(scientific_name)))
shapeData <- readOGR("data/states_proj.shp")
ogrInfo("data/states_proj.shp")
colnames(species_per_state)[colnames(species_per_state)=="state"] <- "NAME"
mergestates <- merge(shapeData, species_per_state, by="NAME")
str_sub(mergestates$Map, 1, str_length(mergestates$Species)-3)
View(mergestates)
str_sub(mergestates@data[["Map"]], 1, str_length(mergestates$Species)-3)
str_sub(mergestates@data[["Map"]], 1, str_length(mergestates$Species)-3)
ui <- fluidPage(
br(),
column(8,leafletOutput("map", height="1000px", width = "1500px")),
column(2,textOutput("testHTML")),
br(),
sidebarLayout(
sidebarPanel(
h1(textOutput("state")),
br(),
imageOutput("spimg"),
br(),
em("Image credit:", textOutput("imgcred")),
br(),
p(strong("Focal Species:"), (textOutput("focalsp"))),
em(textOutput("sciname")),
br(),
p(strong("Species Listing Status:"), (textOutput("listing"))),
br(),
p(textOutput("SpText")),
width = 3),
mainPanel()
))
server <- function(input, output) {
# create a reactive value that will store the click location
observeEvent(input$map_shape_click,{
click_loc <- input$map_shape_click
lat <- click_loc$lat
lng <- click_loc$lng
coords <- data.frame(x = lng, y = lat)
coords <- SpatialPoints(coords)
proj4string(coords) <- proj4string(mergestates)
polygon_select <- as.data.frame(over(coords, mergestates))
state_select <- polygon_select$NAME
focal_sp_select <- polygon_select$CommonName
sci_name_select <- polygon_select$SciName
listing_select <- polygon_select$Listing
img_select <- polygon_select$Image
imgcred_select <- polygon_select$Credits
output$state <- renderText({paste(state_select)})
output$focalsp <- renderText({paste(focal_sp_select)})
output$sciname <- renderText({paste(sci_name_select)})
output$listing <- renderText({paste(listing_select)})
output$spimg <- renderImage({paste(src = img_select,
width = 300,
height = 300)})
output$imgcred <- renderText({paste(imgcred_select)})
})
# variables for map
bins <- c(0, 5, 10, 25, 75, 150, 225, 300, 400)
col_pal <- colorBin("viridis", domain = mergestates$count, bins = bins)
# popup layout
pop_up_layout <- paste(sep = "<br/>",
paste0(mergestates$NAME),
paste0("<b>Number of ESA Listed Species: </b>", mergestates$count),
paste0("<img style=max-height:200px;max-width:300px; src=", mergestates$Image, "' />"),
paste0("<i>Image Credit: </i>", mergestates$Credits),
paste0("<b>Focal Species (Common Name): </b>", mergestates$CommonName),
paste0("<b>Focal Species (Scientific Name): </b>", mergestates$SciName),
paste0("<b>Species Listing Status: </b>", mergestates$Listing),
paste0("<a href=" ,mergestates$Map, "'>Species Map</a>"))
# Leaflet map with 2 markers
output$map <- renderLeaflet({
leaflet(mergestates)  %>% addTiles() %>% setView(lng = -87.251475, lat=39.835402,zoom=4) %>%
addPolygons(data=mergestates,weight=1,col="grey", fillColor = ~col_pal(count),
popup = pop_up_layout,
fillOpacity = 0.75) %>%
addProviderTiles(providers$Esri.WorldGrayCanvas) %>%
addLegend(title = "Number of ESA-Listed Species", position = "bottomleft",
pal = col_pal, values = mergestates$count)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('ESA_species_USA_3')
runApp('ESA_species_USA_3')
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
View(mergestates)
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
ogrInfo("data/states_proj.shp")
mergestates <- merge(shapeData, species_per_state, by="NAME")
mergestates
head(mergestates)
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
ogrInfo("data/states_proj.shp")
mergestates <- merge(shapeData, species_data, by="NAME")
setwd("C:/Users/mlacey/OneDrive - Defenders of Wildlife/R/ESA_species_USA/ESA_species_USA/ESA_species_USA_2/ESA_species_USA_3")
species_data <- read.csv("data/ESAIntrastateSpecies.csv")
shapeData <- readOGR("data/states_proj.shp")
ogrInfo("data/states_proj.shp")
mergestates <- merge(shapeData, species_data, by="NAME")
runApp()
